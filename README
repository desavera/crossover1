CrossOver
Implementation Guidelines for Airline Ticket Reservation System
Author : Mário de Sá Vera
Date : June 11th 2016


This document presents a detailed description of the implementation process of the proposed Airline Ticket Reservation System as well as installation instructions for system testing. The implementation follows the design document located at :

var/doc/DESAVERA-DESIGN-DOCUMENT-2016-05.pdf

in order to install the system , named AIRTS (for Airline Ticket Reservation System) from now on , follow instructions (1),(3) and (4) and you should be able to run the application properly. For a full understanding of the technical strategies see items (2) and (5).

1- Technologies integrated

As a JAVA stack solution and attending to the work scope we will use AWS (i.e. Amazon Web Services) infrastructure with the following technologies for AIRTS implementation :

- Linux server

A production environment infrastructure for high scaling systems should take advantage of Linux system administration tools.The Linux flavour suggested is Ubuntu being adopted by most developers due to its good desktop tools. The recommended Ubuntu distribution minimum version is 14.04 LTS with a minimum of 2Gib of RAM and a user profile with bash unix shell. The proper installation of this infrastructure is a prerequisite for testing the system.

- Tomcat

Tomcat is a very simple, robust and easy to install Application Server in Linux systems. Our choice for model mapping (i.e. Hybernate) has being quite tested with Tomcat and in case we decide to go to a true production infrastructure the service packages for AIRTS deployment should be compatible to all major robust Application Servers. The recommended minimum release for Tomcat is 7. The proper installation of this infrastructure is a prerequisite for testing the system.

- MySQL

MySQL is a natural choice for simplicity and it addresses perfectly the goal for a Linux server infrastructure for our system test in a development environment. The RDS (i.e. Relational Database Service) was chosen and all minimum resources configured (i.e. Dev/Test instances with 5Gb disk space). The recommended minimum release for MySQL database is 5.5. The proper installation of this infrastructure is a prerequisite for testing the system.

- Spring MVC

As the system consists of a Web Application developed as a SAAS (i.e. Software as a Service) architecture, a proper solution for cohesive services in a client x server paradigma is necessary. We do not want to mix presentation layout user interface logic with business logic so that requirements like 


- Hybernate

2- Design patterns and principles used

As a rule of thumb for any system architecture the low coupling and high cohesion of system modules are the main goals.The first design pattern used is the Model, View and Controller (i.e. MVC) pattern. 

3- Installation instructions

Assuming you have access to a Ubuntu system with admin priviledges and the basic infrastrucuture for Database and Application Servers in place (please follow the technologies specification and database creation and configuration in sessions (1) and (4) respectively), in order to install AIRTS for a development environment you should go to the directory where you saved the uploaded solution file and do :

# unzip DESAVERA_CA_Air2.zip  
# cd airts/bin
# install.sh

check the installation complete message and the system is ready to be tested by accessing in a web browser 

4- Database creation and initialization

For a Linux system with MySQL 5.5 or newer installed the devop (playing both profiles as developer and operational admin) will create the AIRTS database instance from the mysql command line :

mysql> source DB-RESERVATION-CORE.sql

and in order to populate the initial mock data into the AIRTS development database instance :

mysql> source DB-RESERVATION-DATA.sql

you now have the database ready for running the AIRTS system.

5- Assumptions adopted

The major assumption is related to the scalability and infrastructure of the system being delivered as part of this test. In the design document I suggested using AWS EC2,RDS and so on (i.e. Amazon Web Services) infrastructure with load balanced modules to achieve high performance for each service deployed. This is a full production scenario and for simplicity and to enable the junior developers to reproduce a development environment I am not going to deploy the services in a cloud computing environment. All services will still attend to operational requirement REQ_OPER_SERVER_CLOUD_ARCH and a cloud full production environment deployment would require no change to the source code at all.

Finally, in terms of infrastructure I assume the system tester with admin access to a Linux Ubuntu system with MySQL installed.

6- Requirements not covered by the current implementation 

7- General issues

8- Feedback

A very challenging trial folks ! The only issu I had was that the second trial home page is not in sync with the application page and that took me about a week to be able to start the second trial.
